// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createDose = `-- name: CreateDose :one
INSERT INTO doses (id, regimen_id, time, amount, unit)
VALUES (?, ?, ?, ?, ?)
RETURNING id, regimen_id, time, amount, unit, taken, time_taken
`

type CreateDoseParams struct {
	ID        string
	RegimenID string
	Time      int64
	Amount    int64
	Unit      string
}

func (q *Queries) CreateDose(ctx context.Context, arg CreateDoseParams) (Dose, error) {
	row := q.db.QueryRowContext(ctx, createDose,
		arg.ID,
		arg.RegimenID,
		arg.Time,
		arg.Amount,
		arg.Unit,
	)
	var i Dose
	err := row.Scan(
		&i.ID,
		&i.RegimenID,
		&i.Time,
		&i.Amount,
		&i.Unit,
		&i.Taken,
		&i.TimeTaken,
	)
	return i, err
}

const createMedication = `-- name: CreateMedication :one
INSERT INTO medications (id, name, generic, brand)
VALUES (?, ?, ?, ?)
RETURNING id, name, generic, brand
`

type CreateMedicationParams struct {
	ID      string
	Name    string
	Generic bool
	Brand   string
}

func (q *Queries) CreateMedication(ctx context.Context, arg CreateMedicationParams) (Medication, error) {
	row := q.db.QueryRowContext(ctx, createMedication,
		arg.ID,
		arg.Name,
		arg.Generic,
		arg.Brand,
	)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Generic,
		&i.Brand,
	)
	return i, err
}

const createRegimen = `-- name: CreateRegimen :one
INSERT INTO regimens (id, medication_id, patient)
VALUES (?, ?, ?)
RETURNING id, medication_id, patient
`

type CreateRegimenParams struct {
	ID           string
	MedicationID string
	Patient      string
}

func (q *Queries) CreateRegimen(ctx context.Context, arg CreateRegimenParams) (Regimen, error) {
	row := q.db.QueryRowContext(ctx, createRegimen, arg.ID, arg.MedicationID, arg.Patient)
	var i Regimen
	err := row.Scan(&i.ID, &i.MedicationID, &i.Patient)
	return i, err
}

const createRx = `-- name: CreateRx :one
INSERT INTO prescriptions (id, medication_id, scheduled_start, refills, doses, schedule)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, medication_id, schedule, scheduled_start, refills, doses
`

type CreateRxParams struct {
	ID             string
	MedicationID   string
	ScheduledStart sql.NullInt64
	Refills        int64
	Doses          int64
	Schedule       []byte
}

func (q *Queries) CreateRx(ctx context.Context, arg CreateRxParams) (Prescription, error) {
	row := q.db.QueryRowContext(ctx, createRx,
		arg.ID,
		arg.MedicationID,
		arg.ScheduledStart,
		arg.Refills,
		arg.Doses,
		arg.Schedule,
	)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.MedicationID,
		&i.Schedule,
		&i.ScheduledStart,
		&i.Refills,
		&i.Doses,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name)
VALUES (?, ?)
RETURNING id, name
`

type CreateUserParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getDosesByPatient = `-- name: GetDosesByPatient :many
SELECT doses.id, doses.regimen_id, doses.time, doses.amount, doses.unit, doses.taken, doses.time_taken, medications.name as medication_name FROM doses
INNER JOIN regimens ON doses.regimen_id = regimens.id
INNER JOIN medications ON regimens.medication_id = medications.id
WHERE regimens.patient = ?
ORDER BY doses.Time
`

type GetDosesByPatientRow struct {
	ID             string
	RegimenID      string
	Time           int64
	Amount         int64
	Unit           string
	Taken          sql.NullBool
	TimeTaken      sql.NullInt64
	MedicationName string
}

func (q *Queries) GetDosesByPatient(ctx context.Context, patient string) ([]GetDosesByPatientRow, error) {
	rows, err := q.db.QueryContext(ctx, getDosesByPatient, patient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDosesByPatientRow
	for rows.Next() {
		var i GetDosesByPatientRow
		if err := rows.Scan(
			&i.ID,
			&i.RegimenID,
			&i.Time,
			&i.Amount,
			&i.Unit,
			&i.Taken,
			&i.TimeTaken,
			&i.MedicationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDoseTaken = `-- name: MarkDoseTaken :exec
UPDATE doses
SET taken = ?, time_taken = ?
WHERE id = ?
`

type MarkDoseTakenParams struct {
	Taken     sql.NullBool
	TimeTaken sql.NullInt64
	ID        string
}

func (q *Queries) MarkDoseTaken(ctx context.Context, arg MarkDoseTakenParams) error {
	_, err := q.db.ExecContext(ctx, markDoseTaken, arg.Taken, arg.TimeTaken, arg.ID)
	return err
}
